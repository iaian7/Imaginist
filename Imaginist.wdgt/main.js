/* 
 This file was generated by Dashcode.
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
	dashcode.setupParts();
	loadPrefs();
	versionCheck();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
	// Stop any timers to prevent CPU usage
	// Remove any preferences as needed
	// widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
	erasePrefs();
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
	// Stop any timers to prevent CPU usage
	updatePrefs();
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
	// Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
	// Retrieve any preference values that you need to be synchronized here
	// Use this for an instance key's value:
	// instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
	//
	// Or this for global key's value:
	// globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
	var front = document.getElementById("front");
	var back = document.getElementById("back");

	if (window.widget) {
		widget.prepareForTransition("ToBack");
	}

	front.style.display = "none";
	back.style.display = "block";

	if (window.widget) {
		setTimeout('widget.performTransition();', 0);
	}
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
	var front = document.getElementById("front");
	var back = document.getElementById("back");

	if (window.widget) {
		widget.prepareForTransition("ToFront");
		updatePrefs();
	}

	front.style.display="block";
	back.style.display="none";

	if (window.widget) {
		setTimeout('widget.performTransition();', 0);
	}
}

if (window.widget) {
	widget.onremove = remove;
	widget.onhide = hide;
	widget.onshow = show;
	widget.onsync = sync;
}



// ---------------------------- //
// Begin app-specific functions //
// ---------------------------- //



var wid = widget.identifier;
var prefType = loadPref(wid+"type",0);
var prefLocation = loadPref(wid+"loc","/opt/local/bin/");
//var prefOutput = loadPref(wid+"output",0);

// Preference Saving

function loadPref(key,value) {
	var string = widget.preferenceForKey(key);
	if (string != null) {
		return string;
	} else {
		widget.setPreferenceForKey(value,key);
		return value;
	}
}

function loadPrefs() {
//	alert("ready!");
	document.getElementById("type").object.setSelectedIndex(prefType);
	document.getElementById("loc").value = prefLocation;
//	document.getElementById("output").object.setSelectedIndex(prefOutput);
	updateFeedback();
}

function updatePrefs() {
	if (window.widget) {
		widget.setPreferenceForKey(prefType,wid+"type");
		widget.setPreferenceForKey(prefLocation,wid+"loc");
//		widget.setPreferenceForKey(prefOutput,wid+"output");
	}
}

function erasePrefs() {
	if (window.widget) {
		widget.setPreferenceForKey(null,wid+"type");
		widget.setPreferenceForKey(null,wid+"loc");
		widget.setPreferenceForKey(null,wid+"output");
	}
}

// Basic Functions

function updateType(event) {
	prefType = document.getElementById("type").object.getSelectedIndex();
	updateFeedback();
	updatePrefs();
}

function updateFeedback(event) {
	switch (prefType) {
		case 0:	//	magic scale (with alpha) - designed for illustrations
			document.getElementById("feedback").innerHTML = "enlarges illustrations by 200%";
			break;
		case 1:	//	magic scale (with texture) - designed for photos
			document.getElementById("feedback").innerHTML = "enlarges photos by 200%";
			break;
		case 2:	//	smooth exlixer
			document.getElementById("feedback").innerHTML = "noise and aliasing just dissapear";
			break;
		case 3:	//	contrast potion
			document.getElementById("feedback").innerHTML = "shadows and highlights that pop";
			break;
		case 4:	//	sharpening powder
			document.getElementById("feedback").innerHTML = "extra dangerous recursive sharpening";
			break;
		case 5:	//	mystic hand
			document.getElementById("feedback").innerHTML = "transforms a photo into pencil lines";
			break;
		case 6:	//	celestial water
			document.getElementById("feedback").innerHTML = "transforms a photo into inky washes";
			break;
		case 7:	//	pastel potion
			document.getElementById("feedback").innerHTML = "transforms a photo into watercolours";
			break;
		default://	no settings
			document.getElementById("feedback").innerHTML = "";
		}
}

function updateLoc(event) {
	prefLoc = document.getElementById("loc").value;
}

function updateOutput(event) {
//	prefOutput = document.getElementById("output").object.getSelectedIndex();
	updatePrefs();
}



// Be sure to assign these handlers for the ondragenter and ondragover events on your drop target. These handlers prevent Web Kit from processing drag events so you can handle the drop when it occurs.

function dragEnter(event) {
	event.stopPropagation();
	event.preventDefault();
}

function dragOver(event) {
	event.stopPropagation();
	event.preventDefault();
}



var uri = [];
var uriParts = [];

function dragDrop(event) {
try {
	uri = event.dataTransfer.getData("text/uri-list");
	uri = uri.replace(/file:\/\/localhost/gi, "");
	uri = uri.replace(/\%20/gi, "\\ ");
	uri = uri.split("\n");
//	alert("uri length: "+uri.length+"\nuri: "+uri.join("\n"));
	uri = uri.sort(sortAlphaNum);
//	alert("uri length: "+uri.length+"\nuri: "+uri.join("\n"));
	for (var i=0; i<uri.length; i++) {
//		alert("i: "+i+"\nuriPart: "+uri[i]);
		uriParts[i] = uri[i].match(/(.+?)(\.\w{3,4})$/);
	}

var command = "";

for (var i=0; i<uri.length; i++) {
	switch (prefType) {
		case 0:
//			alert("magic scale (with alpha)");
			command = prefLocation+"gmic "+uri[i]+" -to_rgba -resize 200%,200%,100%,4,3,1 -sharpen 60,1 -smooth 20,0.2,1,1,1.1,0.8,20,2,1 -output "+uriParts[i][1]+".scale.png";
			widget.system(command, (i+1!=uri.length)?null:endHandler).outputString;
			break;
		case 1:
//			alert("magic scale (with texture)");
			command = prefLocation+"gmic "+uri[i]+" --upscale_smart[0] 200%,200%,100%,32,1,32 --upscale_smart[0] 200%,200%,100%,4,1,24 --upscale_smart[0] 200%,200%,100%,0.5,1,16 --compose_edges[1,2] 16 --compose_edges[3,4] 4 -output[-1] "+uriParts[i][1]+".scale.png";
			widget.system(command, (i+1!=uri.length)?null:endHandler).outputString;
			break;
		case 2:
//			alert("smooth elixer");
			command = prefLocation+"gmic "+uri[i]+" -to_rgba -denoise 4,4,4,4,1.5 -repeat 2 -smooth 40,0.4,1,0.6,1.1,0.8,20,2,1 -done -output "+uriParts[i][1]+".smooth.png";
			widget.system(command, (i+1!=uri.length)?null:endHandler).outputString;
			break;
		case 3:
//			alert("contrast potion");
			break;
		case 4:
//			alert("sharpening powder");
			break;
		case 5:
//			alert("mystic hand");
			break;
		case 6:
//			alert("celestial water");
			break;
		case 7:
//			alert("pastel potion");
			break;
		default:
			alert("No Setting");
		}
	}
	showSuccess(event);
} catch (ex) {
	alert("Problem fetching URI: " + ex);
	showFail(event);
	}
	event.stopPropagation();
	event.preventDefault();
}

function endHandler(output) {
//	alert("output = "+output.outputString);
//	alert("endHandler");
	showMain();
}



function sortName(a, b) {
	var x = a.toLowerCase();
	var y = b.toLowerCase();
	return (x < y) ? -1 : ((x > y) ? 1 : 0);
}

function sortNumber(a, b) {
	return a - b;
}

function sortAlphaNum(a, b) {
	// the next four lines are designed specifically for OS X file arrays
	// and will need to be modified depending on the situation
	var x = a.split("/");
	var y = b.split("/");
	x = x[x.length-1].replace(/\\\s/g," ").split(/(\d+)/);
	y = y[y.length-1].replace(/\\\s/g," ").split(/(\d+)/);
	for (var i in x) {
		if (x[i] && !y[i] || isFinite(x[i]) && !isFinite(y[i])) {
			return -1;
		} else if (!x[i] && y[i] || !isFinite(y[i]) && isFinite(y[i])) {
			return 1;
		} else if (!isFinite(x[i]) && !isFinite(y[i])) {
			x[i] = x[i].toLowerCase();
			y[i] = y[i].toLowerCase();
			if (x[i] < y[i]) return -1;
			if (x[i] > y[i]) return 1;
		} else {
			x[i] = parseFloat(x[i]);
			y[i] = parseFloat(y[i]);
			if (x[i] < y[i]) return -1;
			if (x[i] > y[i]) return 1;
		}
	}
	return 0;
}



// Key listeners

function selectIt(event) {
	if(event.target){
		event = event.target
	}
//	event.focus();
	event.select();
}

// CurrentView animations

function showMain(event) {
	document.getElementById("stack").object.setCurrentView("main", false, true);
}

function showSuccess(event) {
	document.getElementById("stack").object.setCurrentView("success", true, true);
}

function showFail(event) {
	document.getElementById("stack").object.setCurrentView("fail", true, true);
}

function showWrong(event) {
	document.getElementById("stack").object.setCurrentView("wrong", true, true);
}

function showUpdate(event) {
	document.getElementById("stack").object.setCurrentView("update", true, true);
}

// Get Key Value

function getKeyValue(plist, key) {
	var infoPlist = new XMLHttpRequest();
	infoPlist.open("GET", plist, false);
	infoPlist.send(null);
	infoPlist = infoPlist.responseText.replace(/(<([^>]+)>)/ig,"").replace(/\t/ig,"").split("\n");
	for (var i=0; i<infoPlist.length; i++)
		if (infoPlist[i] == key) return infoPlist[i+1];
	return false;
}

// Auto Update

function versionCheck(event) {
	var request = new XMLHttpRequest();
	var address = "http://iaian7.com/files/dashboard/imaginist/version.php?RandomKey=" + Date.parse(new Date());
	request.onload = function() { versionCheckEnd(request); };
	request.open("GET", address);
//	request.setRequestHeader("Cache-Control", "no-cache");
	request.send(null);
}

function versionCheckEnd(request){
	if (request.status == 200) {
		var versions = request.responseText.split("\n");
		var bundleVersion = getKeyValue("Info.plist", "CFBundleVersion");
		var websiteVersion = versions[0];
//		alert("bundleVersion: "+bundleVersion);
//		alert("websiteVersion: "+websiteVersion);

		if (websiteVersion > bundleVersion) {
			document.getElementById("newVersion").innerHTML = "version "+versions[0]+"<br/>"+versions[1];
			return showUpdate();
		} else {
//			alert("you have an up to date version");
		}
	} else {
//		alert("there's been an error fetching HTTP data");
	}
}

// Download File

function versionDownload() {
	widget.openURL("http://iaian7.com/files/dashboard/imaginist/Imaginist.zip");
	showMain();
}

// Visit the website

function iaian7(event)
{
	widget.openURL("http://iaian7.com/dashboard/imaginist");
}